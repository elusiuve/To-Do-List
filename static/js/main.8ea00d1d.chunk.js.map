{"version":3,"sources":["toDoItem/toDoItem.js","toDoItem/toDoData.js","App.js","serviceWorker.js","index.js"],"names":["toDoItem","props","className","style","completed","textDecoration","description","type","defaultChecked","onChange","handleChange","toDoData","id","App","index","state","map","item","indexOf","setState","this","activeTasks","filter","task","completedTasks","finalTasks","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAmBeA,G,YAhBE,SAACC,GAId,OACI,yBAAKC,UAAW,cACZ,yBAAKA,UAAW,uBACZ,uBAAGC,OAA2B,IAApBF,EAAMG,UANN,CAClBC,eAAgB,gBAK6C,IAAKJ,EAAMK,cAEpE,yBAAKJ,UAAW,iBACZ,2BAAOK,KAAK,WAAWC,eAAgBP,EAAMG,UAAWK,SAAUR,EAAMS,mBCezEC,EA5BE,CACb,CACIC,GAAI,EACJN,YAAa,iBACbF,WAAW,GAEf,CACIQ,GAAI,EACJN,YAAa,iBACbF,WAAW,GAEf,CACIQ,GAAI,EACJN,YAAa,gBACbF,WAAW,GAEf,CACIQ,GAAI,EACJN,YAAa,oBACbF,WAAW,GAEf,CACIQ,GAAI,EACJN,YAAa,oBACbF,WAAW,ICuBJS,E,kDAzCX,aAAe,IAAD,8BACV,gBAMJH,aAAe,SAACE,GACZ,IAAME,EAAQ,EAAKC,MAAMf,SAASgB,KAAI,SAACC,GAAD,OAAUA,EAAKL,MAAIM,QAAQN,GACjE,EAAKO,UAAS,SAAAJ,GAAU,IACff,EAAYe,EAAZf,SAEL,OADAA,EAASc,GAAOV,WAAY,EACrBJ,MAVX,EAAKe,MAAQ,CACTf,SAAUW,GAHJ,E,qDAgBJ,IAAD,OACEX,EAAYoB,KAAKL,MAAjBf,SACDqB,EAAcrB,EAASsB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKnB,aAC3CoB,EAAiBxB,EAASsB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKnB,aAC9CqB,EAAa,sBAAIJ,GAAJ,YAAoBG,IAAgBR,KAAI,SAACC,GACxD,OACI,kBAAC,EAAD,CACIS,IAAKT,EAAKL,GACVN,YAAaW,EAAKX,YAClBF,UAAWa,EAAKb,UAChBM,aAAc,WACV,EAAKA,aAAaO,EAAKL,UAKvC,OACI,yBAAKV,UAAU,OACX,0CACCuB,O,GApCCE,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ea00d1d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './toDoItem.css';\r\n\r\nconst toDoItem = (props) => {\r\n    const resolvedClass = {\r\n        textDecoration: 'line-through'\r\n    }\r\n    return (\r\n        <div className={'to-do item'}>\r\n            <div className={'description-wrapper'}>\r\n                <p style={props.completed === true ? resolvedClass : {}}>{props.description}</p>\r\n            </div>\r\n            <div className={'input-wrapper'}>\r\n                <input type='checkbox' defaultChecked={props.completed} onChange={props.handleChange}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default toDoItem;","const toDoData = [\r\n    {\r\n        id: 0,\r\n        description: 'Go to the shop',\r\n        completed: false,\r\n    },\r\n    {\r\n        id: 1,\r\n        description: 'Make some dish',\r\n        completed: false,\r\n    },\r\n    {\r\n        id: 2,\r\n        description: 'Go to the GYM',\r\n        completed: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        description: 'Walk with friends',\r\n        completed: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        description: 'to Read some book',\r\n        completed: false,\r\n    },\r\n]\r\n\r\nexport default toDoData\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport ToDoItem from './toDoItem/toDoItem';\nimport toDoData from \"./toDoItem/toDoData\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            toDoItem: toDoData\n        }\n    }\n\n    handleChange = (id) => {\n        const index = this.state.toDoItem.map((item) => item.id).indexOf(id)\n        this.setState(state => {\n            let {toDoItem} = state\n            toDoItem[index].completed = true\n            return toDoItem\n        })\n    }\n\n    render() {\n        const {toDoItem} = this.state\n        const activeTasks = toDoItem.filter(task => task.completed === false)\n        const completedTasks = toDoItem.filter(task => task.completed === true)\n        const finalTasks = [...activeTasks, ...completedTasks].map((item) => {\n            return (\n                <ToDoItem\n                    key={item.id}\n                    description={item.description}\n                    completed={item.completed}\n                    handleChange={() => {\n                        this.handleChange(item.id)\n                    }}\n                />\n            )\n        })\n        return (\n            <div className=\"App\">\n                <h1>To-Do List</h1>\n                {finalTasks}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}